09/04/18 (3:30 to 5:30)
---------
MD Abbas.

Logging (Log4j - appache and java)



I am gong to share this notes/ppt + sample code
in git hub.


SLF4j
-------

Environments
-------------

1)Dev Environment (JDK,Source code, Eclipse)
2)QA Environment (no JDK, no code, no eclipse)   -JRE + server
3)Product Environment
4)UAT (User Acceptance Testing)


Requirements
-------------
1)Functional Requirement - Given by the client
2)Non-Functional Requirement
	Transactional handling, logging, Security


DO ->  Java Bean -> POJO -> A Java class
	with properties/fields
	and setter/getter methods


DAO -> Data Access Object -  CRUD Operations
	Create, Retrieve, Update, Delete

MVC -> Model, View and Controller
V-> JSP/HTML/CSS/Boostrap 
C-> Mediator between V and M
    will take a request from V and 
    dispatch the require to M
M-> Model - Business logic   (DO+DAO)


What are factors we have to consider when we write a simple function
--------------------------------------------------------------------
1)performance
2)reusability
3)enhancement
4)memory


Naming convention for package
-----------------------------
orgnaization_type.orginzation_name.project_name.module_name/layername



ncr =  n!/  (n-r)! * r!




create git-hub account - today
login in into git hub
create repository

download gitbash - using commands you can add files and commit/push


11/04/18
---------
This week agenda
----------------

1)Develop simple web app without using spring,hibernate and maven


2)create a dynamic web app - in eclipse - DONE

3)create simple login.html (View)  -DONE
        crete a simple form
	create two fields id, and password
        create two buttons login, reset
4)validate id and password is corrent or not
    -the request supposed to go to controller
    -a servelet  - a java class which extends HttpServlet (Controller)
    -given some compilations errors - HttpServelet, HttpServletRequest
	HttpServletResponse classes are not available.
   -  configure the servlet-api.jar file in java build path - DONE
  -  it will be available in tomcat/lib folder  -DONE

	a)create home page
	b) if the credentials are valid -> show home page
		Dispacth/forward the request to home page
                we have -> ReqeustDispatcher - Interface
	c) if the credentials are invalid -> show login page + error message
                Dispatch/include in login page.



5)create a Model (DAO - Data Access Object)

6)Create DBConnection - get the connection

softwares
----------
JDK, Eclipse - we have
web server - download tomcat - 9.X  -DONE.
	-configure in eclipse.   - DONE.
db server  - download H2
Google:  download H2 



Errors
-------
1)HTTP Status 500 – Internal Server Error
500->resources is there but not proper.
Please see complete exception stack trace.
->in while class, in which method, in which line - the error is there
->what error 

404 -> The resource not available.  
	resource ->html/jsp/servlet



Tomorrow
---------
1)solve errors
2)give error message "invalid credentials ...try again"
3)Download h2
4)create a table
5)crete DB Connection
6)Intergate (remove hardcoded valus  - niit , niit@123

12/04/18
---------
What we have done yesterday
---------------------------
1)created dynamic webapp
2)created login.html
3)created LoginController.java - servlet
4)Downloaded tomcat - configureld in eclipse
5)we got some error - few of them we solved

Today
-------
1)run the application in server  DONE
2)solve errors if any  - DONE
3)Download H2 database - DONE
4)Establish DBConnect    - DONE
	i)Tested the DBConnection
5)create one table - user - DONE
------Pending
6)create DAO -
7)Integrate with servelt - DAO


Download H2 database 
Open H2 Server
default - schema - test
schema -> keep group of database objects
	   - table, view, index, sequence



Datatype
----------
int, number
char , nchar
varchar2, nvarchar2, varchar

contraints(5)
-----------
not null -> The field should not be empty
unique   -> should not repeated
primary ke -> unique + not null
check
reference / foreign key



User Table
----------
create table user
(
emailid  varchar2(20) primary key,
name   varchar2(40) not null,
password  varchar2(40)  not null,
mobile   varchar2(15) unique,
address varchar2(100)
)



Debugging
---------
You have run in debug mode

F6-> goto next line
F7-> return to function where you are calling
F5->  got to inside method












DBConnection (SigleTon Design Pattern)
------------
1)user name
2)password
3)Driver
4)URL - ipaddress, port, schema


We supposed create only one instance of DBConnecction

DBConnection con = new DBConnection();  //do not use


DBConnection con1 = new DBConnection()

DBConnection con2 = new DBConnection()

DBConnection con3 = new DBConnection()


How can you restrict the devlopers to use new key word.
whenever the stement 
new DBConnectin() -  will the constructor
                    make this constructor as private


Then how can they create one instance
provide a method which returns instance - 
should load only one time  - static


Exception
-----------
1)ClassNotFoundException - org.h2.Driver
Solution:  Coy the h2-1.4.x from H2 folder to
  WEB-INF/lib folder

13/04/18
--------
What we learn yesterday?
-------------------------
1)H2 - downloaded
2)created the user table
3)DBConnection
4)Tested the DB Connectino
-------------
Today
-----
1)insert few records in user table.  - DONE
2)Implement UserDAO  - simple java class - DONE
	(CRUD -> create, retrieve, update, delete)

3)Integrate servlet ->DAO (remove hard coded values)




Download Anydesk...



16/04/18
--------
This week
-----------
1)going to start shopping cart app
2)Maven
3)Spring

Today
-----
Crete two separate projects
1)Shoppingcart backend project

2)Shoppingcart frontend project

In the clipse :
1)java project - can write only java code
2)Dynamic web project - can write - java code + html,css,jsp

we are going use maven
maven -> no need to donwload the required s/w manually
	-by individual developers
document - mention softwares + version
-POM -> Project Object Model - xml 
	groupid,  artifact id , version
1)front end side -> maven-web-app (web app)
2)back end side -> maven-quick-start (java app)

Two ways to create these projects
----------------------------------
1) directly in the eclipse - DONE
2) using mvn commands -
	i)Download maven
	ii)Environmen setup
	iii) write commands.
mvn archetype:generate -DgroupId=com.niit -DartifactId=ShoppingCartTemp -DarchetypeArtifactId=maven-archetype-quickstart

Note:  If you create mvn project through command prompt
    	you can use this project directly in eclipse
    --convert this mvn project into eclipse project.
       mvn eclipse:eclipse
Note:  run this command in folder where pom.xml file exist.

Dependencies
-------------
1)Back End
 spring core, spring context
 hibernate, h2 etc.,


2)Front End
  spring web, spring web mvc

we need to get groupid, artifactid and version
of above softwares jar/war

mvnrepository.com
------------------


Test whether these projects are created properly or not   -- Pending
--------------------------------------------------------



17/04/18
---------
Yesterday
---------
1)Concepts of Spring frameworks  -DONE 
2)Created quick-start and web-app projects
	through eclipse  -DONE
3)We have to test  -
	i)Test Front end project - DONE
	ii)Test Backend project
		a)create simiple bean class - DONE
		b)Without using 'new' key word
			get the instance   -DONE
4)Created these projects through command prompt.

5)Configuruging front end project
	web.xml
	dispatcher servlet.xml





Annotation: - Core Java 1.5

-instructions to the compiler/runtime/deploy time
  to generate the code on-behalf of you.

@Component  -> Will create the instance of the class

What will happen if create the instance our selves.
---------------------------------------------------
There may be 'n' developers may there.
each and developer - in different classes , they 
create unncessaray instances.



Errors:  mvn install
-------
1)No compiler is provided in this environment. 
Perhaps you are running on a JRE rather than a JDK?
[INFO] 1 error

Solution:
In the project build path - provide JDK path
		-not JRE Path


18/04/18
--------
Yesteday:
1)created two separate projects 
	a)maven quick start  -  Tested  --How we tested?
	b)maven web app

Today:
Maven - web ap  - configuration
	a)web.xml
	b)dispatcher-servlent / front controller
Spring-mvc - created ppt - shared in git hub


http://localhost:8080/shoppingcart/validate
resources -> handler/servetlet/controller...jsp/html


http://localhost:8081/ShoppingCartFrontEnd/

/ - method handler - define

WARNING: No mapping found for HTTP request with URI
 [/ShoppingCartFrontEnd/] in DispatcherServlet with name
 'dispatcher'

We have create A controller
define a method which should be excuted when
user type  - in browser

http://localhost:8081/ShoppingCartFrontEnd/



Error:
-----
1) java.lang.ClassNotFoundException: 
org.springframework.web.context.ContextLoaderListener

Solution:
1)right click on project
2)select project properties
3)click on Deployment Assembly
4)click on add button
5)select java build path entries
6)Click next
7)select maven

19/04/18
---------

yesterday:
-------
1)Configured web.xml, dispatcherservlet.xml
2)Created on controller
3)we written method handler / handler mapping
4)Teststed

Today
-----

We need to create hypber links  - login, register
Temporarily will code manually, will copy from google



You can write your own css classes
css classes -> to apply some style (color, size, font etc.,)


20/04/18
--------
1)SPA
  - Single Page Application
2)Model  - Interface
3)ModelAndView - Class
like HashMap

Communication between view(jsp) and controller(servlet/java class) 


If you want send some information from controller -> view
 you need to use Model  OR  ModelAndView


ModelAndView -> Which page/view to navigate
		what data/model to carry

ModelAndView mv = new ModelAndView("home")
mv.addObject("key" , data);  // this key can be used in jsp file
by using Spring Expression Language
${key}   - will display data


23/04/18
---------
Last sesion:
1)Model - interface
2)ModelAndView - class
3)Sending the data from controller to view
4)Spring Expression language -  ${key}

Today
------
Sending the data from view to controller
login.jsp - id and password  - validate - in controller
UserController - validate - registration - update


Error :
1)HTTP Status 405 – Method Not Allowed
Message: Request method 'POST' not supported

Solution: given method="post" in jsp page
	and
	@PostMapping() in controller


2)
HTTP Status 400 – Bad Request
Message Required String parameter 'id' is not present

Solution:
Check name of the text field in jsp
compare with the RequestParameter in controller
 --both should be same


24/04/18
--------
Yesterday :
1)Sending data from view to controller
	@RequestParam
2)validated the credentials

3)Solved few errors.


Today:
1)backend project
2)we already created maven quick start project
3)we tested the back end project
	-without using "new" key word, we are able get instance
--------DONE--------------
4)Download H2 Databse - DONE
5)we supposed to created the tables.





There are different types of users in our application
-----------------------------------------------------
1)customer / end user
2)admin
3)supplier


char, varchar, varchar2, nvarchar
char ->fixed length
name char(30)  -> 30 characters - memory
name varchar(30) -variable length

As of now, there is no difference
between varchar and varchar2
(Oracle official document)
nvarchar - National Character set - Unicode - 16

ASCII - 7 bit  - (2 pow 7 -1) - 127
a..z  - 26
A..Z  - 26	
0..9  - 10
special character - 20 - 82


Unicode - 2 bytes - 16 bits



Tables
------
User
----
create table user 
(
emailid varchar2(20) primary key,
name varchar2(30) not null,
password varchar2(20) not null,
mobile varchar2(16) not null,
address varchar2(100) null,
role char default 1,
added_date date default sysdate
)

-------------
Category
-----

create table  category
(
name varchar2(20) primary key,
description varchar2(100) null,
added_date date default sysdate

)

-------
Product
-------
create table product
(
id varchar2(20) primary key,
name varchar2(30) not null,
price int null,
description varchar2(100) null,
added_date date default sysdate,
category_name varchar2(20) references category(name)

)

--------
cart
---------
create table cart
(

id int primary key,
emailid varchar2(20) references user(emailid),
productname varchar2(30) not null,
quantity int default 1,
price int not null,
status char default 'N',
added_date date default sysdate
)








This week.
--------
1)Hibernate configuration
2)Domain object
3)DAO + DAOImpl
4)JUnit Testcases

google:  abbas886  github

send github account to me 
+  error description
+ complete error stack trace(eclipse console)
:  abbas886@gmail.com

Note: Do not send zip files--only git hub account.


For other issues -  srinivas.patnaik@niit.com

25/04/18
--------
What is hibernate
Why hibernate
Hibernate architecture
Configuration data source.

26/04/16
---------
Yesterday
---------
ORM
Hibernate Architecture
Configuration

Today
------
1)Configuration - program
	
	a)create separate package
		com.niit.shoppingcart.config
	b)create a class - ApplicationContextConfig.java
		OR DBConfig.java
	c)Above the class 3 annotations
		@Configuration
		@ComponentScan(basepackage="com.niit")
		@EnableTransactionManagement
	d)Need to define function
		i)getDataSource
		ii)getHibernateProperties
		iii)getSessionFactory
		iii)getTransactionManage
        c)add maven dependencies
		i)spring-orm
		ii)hibernate-core
                iii)h2

2)DO Objects/Model - for each table
	1)create a separate package
		com.niit.shoppingcart.model
	2)create class for each table

Assignment :  create other classes for all other tables.
	
3)DAO/DAOImpl
	i)create a saparate package
		com.niit.shoppingcart.dao
		a)Create separate interface for each table/model
		b)declare the methods (CRUD Operations)
		c)create impmentation class


4)JUnit Testcases









java_statement

try
{
sum=a+b
}
catch(Exception e)
{

}



























































@Autowired
----------
Class A
{
public void showMessage()
{
   sop("Hello");
}

}
------------
Class B
{

//A a = new A();
@Autowired
A a;

a.showMessage();


}









why we should create instance with new operator
-------------------------------------------------
public Class Employee
{



}

Dev1
----
public Class testEmployee
{
   Employee e = new Employee()
}

Dev2 / in other

public Class Department
{

  Employee  e = new Employee();




}


27/04/18
--------
Yesterday :
1)We created user model/domain class
2)we created UserDAO - Interface
	a)declared the methods
3)We created UserDAOImpl - Class
	a)implemented methods

Today : - Just like repitation
	instead of User - Category

1)Create Category class - domain/model/bean - DONE
2)Create CategoryDAO - interface            - DONE
	a)declare the required methods      - DONE 
3)Create CategoryDAOImpl - Class            - DONE
	b)implement the methods which are there in CategoryDAO -DONE


The same thing - you have do for Product
--copy paste the interace and class



Relationship/Association  : Between the Objects/classes
-------------------------------------------------------

1)Generalization   :  Inheritance
	: Relationship : a type of /  a kind of 
        Ex: Employee(salary) is type of Person(name, address, mobile)
            ContractEmployee(durnation) is a type of Employee
            PermanentEmployee(pf) is a type of Employee
            Employee extends Person
            ContractEmployee extends Employee
	    PermanentEmployee extends Employee
 
	    

2)Composition  - Relationship:  part of  - Tightly Coupled
3)Aggregation  - Relationship:  part of  - Loosely coupled  (DAO - Model)

Student is part of Branch
Page is part of Book

Address is part of Employee
Employee is part of Department

public Class Employee
{
  private Address address;
  
}


4)Realization  - Interfaces - implmentatino class

Multiplecity
------------
1..1      :Employee--Address
1..Many   :Category - Product
Many..1    : Product - Category
Many..Many : Teacher - Subject
Recursive. :

public Class Employee
{

 private int id;
 private String name;
 private int salary;
 privaet Employee  manager;

}




OOPS
----
data hiding





Assignment:
-----------

1)Create domain objects for product and cart
2)CartDAO and CartDAOImpl  (will modify)


30/04/18
--------
Note: 
1)There is no session tomorrow i.e., 01/05/18
2)As a compensation, session will be there on 05/05/18(coming saturday)
-------
3)Those who are not clear/attended test can write after this session
	Today).

Yesterday
---------
User, Product and Category - tables/DO/DAO and DAO Impl

Today
-----
Cart 







JUnitTestCases
--------------
It is program to test other progeams/api/method
1)Maven Dependency - JUnit
2)Annotations  ///before method
	a)@Test    
	b)@Before  //Before executing each test case, this method will be executed
	c)@BeforeClass //Before executing any one of the test case, this method will be executed




Exceptions
-----------
1)org.springframework.beans.factory.NoSuchBeanDefinitionException: 
No bean named 'userDAO' available

Solution:  
1) if it model  ->  @Component
2) if it DAO   ->  @Respository  (we are interacting with database repository)
	

02/05/18
--------
1)Test UserDAOTestCase
	a)we written only one test case - saveUser
2)Write other test cases.



Error
------
1)ERROR: Connection is broken: 
"java.net.ConnectException: Connection refused: connect: 
localhost" [90067-196]

Solution:    Open H2 in browser ( running db server)

2)org.hibernate.MappingException: 
Unknown entity: com.niit.shoppingcart.domain.User

Soltuion: A)Check whether you have @Entity above the User class or not
OR
B)  In the ApplicationContextConfig.java class
	check whethere you added annotated classes or not.


3)ERROR: HHH000346: Error during managed flush 
[org.hibernate.exception.ConstraintViolationException: 
could not execute statement]
NULL not allowed for column "MOBILE"

Solution:   set mobile to user bevore calling save method


4)ERROR: Unique index or primary key violation: 
"PRIMARY_KEY_2 ON PUBLIC.USER(EMAILID) VALUES 
('Rakesh@gmail.com', 1)"; SQL statement:

Solution:  Give differernt mail id





Testcase Outputs
----------------
1) Pass  (expected = actual)
2) Fail  (expected != actual)
3) Error (if program through any Exception)


Assignment
-----------
Write the test case for Category, product and Cart.

04/05/18
--------
Category module



Error
-------
1)No identifier specified
@Id should be used for primary key field


Assignment
----------
Write the test case for CartDAO....Tommorrow - saturday
--same timings.




Nextweek
---------
Go back to Front Project  - integration with back end..

5/5/18
-------

Yesterday:  Product module related test cases


Today: Card module related test cases


Next week:  Integrate front <--> backend 


Autogeneration
--------------
1)Hibernate Annotation
2)Databse sequence
	i)create sequence sequance_name
		(min=100, max=100000, step=1, cycle=true    )
3)generate rand number in java
	-0 to 1
4)prgramatically get max value increase by 1




07/05/18
--------
Today
------
Integrating front end - back end project.

1)ProjectA  - ClassA -  methodA

2)ProjectB  -  ClassB  - methodB
from methodB, call methodA

Options
-------
1)if both projects are in the same workspace
	a)include projectA in projectB build path

2)if both projects are in the different workspace



JSTL -> JSP Standard Tag Library


We supposed to load all the categories(products)
whenever user type http://localhost:8080/shoppingcart/

@GetMapping("/")
public ModelAndView load()
{
//get all the categories from category dao
//set to ModelAndView object

} 


Navigate to specific page based on role
---------------------------------------

1)Create a folder - admin - DONE
	a)creating admin.jsp
	b)category.jsp
	c)supplier.jsp
	d)product.jsp

2)get the role of the logged-in user - DONE
	UserController
		User user = validate(id,pwd);
			if(user.getRole()=='C')

			
3)if the user is admin, show admin.jsp  -DONE


Tomorrow
--------
admin.jsp - >  added 3 anchor tags
1)if admin click manage categories -> include category.jsp
2)if admin click manage products-> include product.jsp
3)if admin click manage suppliers-> include supplier.jsp

category.jsp
------------

1)add two text fields name and description
2)add one button - save
3)Create CategoryController.  
	a)save category method handler
		i)call categoryDAO.save(category);



08/05/18
---------

Yesterday:
a)Intergration frontend - back
b)User module - validate
c)category - get all categories




Today:
--------
admin.jsp - >  added 3 anchor tags - DONE
1)if admin click manage categories -> include category.jsp -DONE
2)if admin click manage products-> include product.jsp   -DONE
3)if admin click manage suppliers-> include supplier.jsp  -DONE

category.jsp
------------

1)add two text fields name and description - DONE
2)add one button - save                    - DONE
3)Create CategoryController.               - DONE ( Pending)
	a)save category method handler     -  DONE
		i)call categoryDAO.save(category);  -DONE

4)display list of categories in category.jsp
5)add edit/delete links in this page.

Tomorrow
--------

4)display list of categories in category.jsp - in table format
5)add edit/delete links in this page.






FLOW
-----
1) Send Data
	JSP->Controller->DAO->DB


2) Receive Data
	DB -> DAO -> Controller->JSP




sending parameter through url
------------------------------
1)validate
http://localhost:8080/shoppingcart/validate?emaild=anamika@gmail.com&password=anamika@123
2)send category name
http://localhost:8080/shoppingcart/category/delete?name=Women
--give in anchor tag



Mappings
--------
GetMapping  - get the data by sending parameter
DeleteMapping - delete the dat1 be sending parameter
PostMapping   - save the data 
PutMapping    - to update data
 

FlashAttribute
---------------



Tomorrow
---------
The same operations  -- Supplier and Product

10/05/18
------------

1)we already created supplier.jsp
2)In supplier.jsp
	a)create fields
	b)add button - submit
	c)display list of existing suppliers
	d)delete/edit existing supplier details


































































































scopes
------
1)Request scope:  
	The object will be available between only two resources
		(Resources -> jsp/controller)
ModelAndView  // Model
2)Session scope:
	The object will be available among all the resources.
	till loggout.
HttpSession
3)Application
	The object will be available among all the resources.
	till server shutdown.


09/05/18
--------

Instergating category module

















































































































































































































































































































































































































































































































































  















































	












































































































Only Tomorrow - Koel Madam - will take class

Remaining part of the project - I will continue.





11/04/18
---------
Note:  NO SLT Sessions from 14th to 17th of this month
       Due to planned studio maintanance days.

Today's agenda
---------------



















